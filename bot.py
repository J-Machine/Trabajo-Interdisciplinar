# BOT TELEGRAM : CONSULTAS EPCC
#-------------------------------

import logging      # Ayuda a ver lo que sucede con el bot y mostrarlo en consola
import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, Filters

# Variables
TOKEN = '1862455246:AAHDE6lLYMHHYk7-p_rBSgf_L3CYRkO4IYA'

# Configuracion de logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s,"
)
logger = logging.getLogger()

# Funciones para comandos
def start(update, context):
    bot = context.bot
    # chat_Id = update.message.chat_id
    user_Name = update.effective_user["first_name"]
    logger.info(f'El usuario {user_Name} ha iniciado(/start) el bot')   # Consola retroalimentaci√≥n

    # Botones
    btn_contacto = InlineKeyboardButton(
        text='‚úâÔ∏è Contacto de EPCC',
        callback_data="contacto"
    )
    btn_tramites = InlineKeyboardButton(
        text='üéì Informaci√≥n de tr√°mites',
        callback_data="tramite"
    )

    # Lo que se muestra al ejecutar el comando /start
    update.message.reply_text(
        text=f'Hola {user_Name} ‚ò∫Ô∏è.\nGracias por usar nuestro bot ü§ñ. '
             f'A continuaci√≥n te mostramos los tipos de informaci√≥n que podemos darte.\n'
             f'S√≥lo toca la opci√≥n que te interesa.',
        reply_markup=InlineKeyboardMarkup([
            [btn_contacto],
            [btn_tramites]
        ])
    )

def getBotInfo(update, context):
    bot = context.bot
    chat_Id= update.message.chat_id
    user_Name = update.effective_user["first_name"]
    logger.info(f'El usuario {user_Name} ha solicitado informaci√≥n(/infoBot) sobre el bot')

    bot.sendMessage(
        chat_id=chat_Id,
        parse_mode="HTML",
        text=f'Hola soy el bot ü§ñ de la <b>Escuela Profesional de Ciencia de la Computaci√≥n - UNSA</b>.'
             f'Si necesitas informaci√≥n sobre tr√°mites de Bachiller y T√≠tulo Profesional '
             f'puedo ayudarte. Comienza escribiendo /start.' # 2da manera de responder
    )

# Callbacks functions
def contacto_callback_handler(update, context):
    # print(update.callback_query)
    query = update.callback_query   # Recibe el mensaje
    query.answer()  # Requerido. Responde silenciosamente

    query.edit_message_text(
        parse_mode='HTML',
        text=' <b>INFORMACI√ìN DE CONTACTO DE LA EPCC</b>\n'
             '‚ñ´Ô∏èCorreo electr√≥nico: epcc@unsa.edu.pe\n'
             '‚ñ´Ô∏èTel√©fono: 949107364 (Secretar√≠a Raquel)\n'
             '‚ñ´Ô∏èHorario de atenci√≥n: Lunes a viernes de 8:30 a 10:30AM (v√≠a Meet) \n'
             '‚ñ´ Meet de atenci√≥n: meet.google.com/smh-igaw-vze\n'
    )

def tramites_callback_handler(update, context):
    # Consola retroalimentaci√≥n
    user_Name = update.effective_user["first_name"]
    logger.info(f'El usuario {user_Name} ha seleccionado Tr√°mites')

    #Actualizando consulta
    query = update.callback_query  # Recibe el mensaje
    query.answer()  # Requerido. Responde silenciosamente

    # Botones
    btn_bachiller = InlineKeyboardButton(
        text=' üéìüìÉ Tr√°mite para Bachiller',
        callback_data="bachiller"
    )
    btn_titulacion = InlineKeyboardButton(
        text=' ‚Äçüéìüìú‚Äç Tr√°mite para Titulaci√≥n',
        callback_data="titulacion"
    )

    query.edit_message_text(
        parse_mode='HTML',
        text=f'{user_Name}, estos son los tr√°mites de los que podemos brindarte informaci√≥n üôÇ ',
        reply_markup=InlineKeyboardMarkup([
            [btn_bachiller],
            [btn_titulacion]
        ])
    )
def titulacion_callback_handler(update, context):
    # Consola retroalimentaci√≥n
    user_Name = update.effective_user["first_name"]
    logger.info(f'El usuario {user_Name} ha seleccionado Tr√°mites > Titulacion')

    #Actualizando consulta
    query = update.callback_query  # Recibe el mensaje
    query.answer()  # Requerido. Responde silenciosamente

    query.edit_message_text(
        parse_mode='HTML',
        text='<b>REQUISITOS PARA OBTENER EL TITULO PROFESIONAL</b>\n'
             '‚ñ´Ô∏èSolicitud dirigida al Decano de la facultad en formato UNSA.\n'
             '‚ñ´Ô∏èRecibo de pago de expedito para optar el T√≠tulo Profesional.\n'
             '‚ñ´Ô∏èTrabajo de investigaci√≥n digitalizado en formato PDF. \n'
             '‚ñ´Ô∏èConstancia emitida por la Biblioteca Virtual de autorizaci√≥n de publicaci√≥n en el portal de Tesis '
             'Electr√≥nicas. \n'
             '‚ñ´Ô∏èCertificado negativo de antecedentes penales.\n'
             '‚ñ´Ô∏èCertificado oficial de estudios.\n'
             '‚ñ´Ô∏èCopia legalizada de DNI en formato A5. \n'
             '‚ñ´Ô∏èCopia legalizada del Grado de Bachiller. \n'
             '‚ñ´Ô∏èFotograf√≠a tama√±o pasaporte a color fondo blanco. \n'
             '‚ñ´Ô∏èConstancia de Egresado. \n'
             '‚ñ´Ô∏èConstancia que acredite dominio de nivel intermedio de idioma extranjero.\n'
             '‚ñ´Ô∏èConstacia de inscripci√≥n a SUNEDU del Grado Acad√©mico de Bachiller. \n'
             '‚ñ´Ô∏èConstancia de no adeudar Bienes. \n'
             '‚ñ´Ô∏èConstancia de Biblioteca. \n'
             '‚ñ´Ô∏èRecibo de Subdirecci√≥n de Finanzas de pago de los derechos por todos los conceptos. \n'

    )
def bachiller_callback_handler(update, context):
    # Consola retroalimentaci√≥n
    user_Name = update.effective_user["first_name"]
    logger.info(f'El usuario {user_Name} ha seleccionado Tr√°mites > Bachiller')

    #Actualizando consulta
    query = update.callback_query  # Recibe el mensaje
    query.answer()  # Requerido. Responde silenciosamente

    # Botones
    btn_modo_articulo = InlineKeyboardButton(
        text=' üìÉ Modalidad por Art√≠culo Cient√≠fico',
        callback_data="articulo"
    )
    btn_modo_proyecto = InlineKeyboardButton(
        text=' üìÉ Modalidad por Proyecto de Investigaci√≥n',
        callback_data="proyecto"
    )

    query.edit_message_text(
        parse_mode='HTML',
        text=f'Estas son las dos modalidades para obtener el <b>Grado de Bachiller</b> üëá',
        reply_markup=InlineKeyboardMarkup([
            [btn_modo_articulo],
            [btn_modo_proyecto]
        ])
    )
# Main Function
if __name__ == '__main__':
    mybot = telegram.Bot(token=TOKEN)
    print(mybot.getMe())  # Muestra en consola informaci√≥n sobre el bot

    # Updater: se conecta y recibe los mensajes
    updater = Updater(mybot.token, use_context=True)

    # Crear el 'despachador'
    dp = updater.dispatcher

    # Crear comando y el m√©todo (acci√≥n del comando)
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("botInfo", getBotInfo))

    # Crear el callback handler
    # ConversationHandler define como ser√° la conversaci√≥n
    dp.add_handler(ConversationHandler(
        entry_points=[
            # Al recibir el patron definido en el data del bot√≥n ejecuta la funcion callback
            CallbackQueryHandler(pattern='contacto', callback=contacto_callback_handler),
            CallbackQueryHandler(pattern='tramite', callback=tramites_callback_handler),
            CallbackQueryHandler(pattern='bachiller', callback=bachiller_callback_handler),
            CallbackQueryHandler(pattern='titulacion', callback=titulacion_callback_handler)
        ],
        states={},
        fallbacks=[]
    ))

    # Preguntar por mensajes entrantes to do el tiempo
    updater.start_polling()

    # Terminar bot con ctrl + c
    updater.idle()